using Microsoft.Office.Tools.Ribbon;
using System;
using System.Collections.Generic;
using System.Linq;

// Word Add-In
using System.IO;
using Word = Microsoft.Office.Interop.Word;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.Office.Interop.Word;
using System.IO.Compression;
// Word Add-In

namespace Word_AddIn_Malware
{
    public partial class Ribbon1
    {
        private void Ribbon1_Load(object sender, RibbonUIEventArgs e)
        {

        }

        // ============================ Magic Numbers ====================================
        private byte[] sevenZipMaigic = new byte[] { 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C };
        private byte[] portableExecutableMaigic = new byte[] { 0x4D, 0x5A };
        private byte[] rarMaigic = new byte[] { 0x52, 0x61, 0x72, 0x21, 0x1A, 0x07 };
        private byte[] zipMaigic = new byte[] { 0x50, 0x4B };
        // ===============================================================================

        private void btn_ExtractArtifacts_Click(object sender, RibbonControlEventArgs e)
        {

            Word.Document doc = Globals.ThisAddIn.Application.ActiveDocument;
            string docPath = doc.Path + "\\" + doc.Name;
            MessageBox.Show(docPath);

            string zipPath = "D:\\Extract\\result.zip";


            // ============= DOC2ZIP ===============
            string sourceFile = docPath;
            string destinationFile = zipPath;
            try
            {
                File.Copy(sourceFile, destinationFile, true);
                
            }
            catch (IOException iox)
            {
                Console.WriteLine(iox.Message);
            }
            // ======================================



            List<byte[]> data = new List<byte[]>();

            // =========== Iterate over ZIP =========
            using (ZipArchive archive = ZipFile.OpenRead(zipPath))
            {
                foreach(ZipArchiveEntry entry in archive.Entries)
                {
                    if(entry.FullName.EndsWith(".png", StringComparison.OrdinalIgnoreCase)   ||
                       entry.FullName.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)  ||
                       entry.FullName.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) ||
                       entry.FullName.EndsWith(".bmp", StringComparison.OrdinalIgnoreCase))
                    {
                        string destinationPath = "D:\\Extract\\Images";
                        DirectoryInfo folder = Directory.CreateDirectory(destinationPath);
                        //destinationPath = "D:\\Extract\\Images\\" + entry.FullName;
                        destinationFile = destinationPath + "\\" + Path.GetFileNameWithoutExtension(doc.Name) + entry.Name;
                        MessageBox.Show(destinationFile);
                        long milliseconds = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;
                        entry.ExtractToFile(destinationFile + milliseconds.ToString());


                        // ============== Extract EXE, 7Zip, Zip, Rar ============
                        byte[] imageBytes = File.ReadAllBytes(destinationFile + milliseconds.ToString());
                        byte[] content = File.ReadAllBytes(destinationFile + milliseconds.ToString());

                        int offset = 0;
                        int portableExecutableOffset = 0;
                        while (portableExecutableOffset != -1)
                        {
                            if (offset == 0)
                            {
                                portableExecutableOffset = IndexOf(imageBytes, portableExecutableMaigic);
                                offset = portableExecutableOffset;
                                MessageBox.Show(offset.ToString());
                            }
                            else
                            {
                                imageBytes = imageBytes.Skip(portableExecutableOffset + 1).ToArray();
                                portableExecutableOffset = IndexOf(imageBytes, portableExecutableMaigic);
                                offset = offset + portableExecutableOffset;
                                MessageBox.Show((offset).ToString());

                                byte[] exe = content.Skip(offset + 1).ToArray();
                                var writer = new BinaryWriter(File.OpenWrite("D:\\Extract\\Exe\\" + Path.GetFileNameWithoutExtension(entry.Name) + offset.ToString()));
                                writer.Write(exe);
                                writer.Close();
                            }

                        }
                        // ========================================================

                    }
                }
            }
            // =====================================================================



        }


        // ===== Index of an array de bytes in another byte array ======
        public static int IndexOf(byte[] arrayToSearchThrough, byte[] patternToFind)
        {
            if (patternToFind.Length > arrayToSearchThrough.Length)
                return -1;
            for (int i = 0; i < arrayToSearchThrough.Length - patternToFind.Length; i++)
            {
                bool found = true;
                for (int j = 0; j < patternToFind.Length; j++)
                {
                    if (arrayToSearchThrough[i + j] != patternToFind[j])
                    {
                        found = false;
                        break;
                    }
                }
                if (found)
                {
                    return i;
                }
            }
            return -1;
        }
        // =============================================================================


        // ==================== Systeam.Drawing.Image conversion to byte[] ========================
        public static byte[] converterImage2ByteArray(Image x)
        {
            ImageConverter _imageConverter = new ImageConverter();
            byte[] xByte = (byte[])_imageConverter.ConvertTo(x, typeof(byte[]));
            return xByte;
        }
        // ==============================================================================



        // ========= Get image from Microsoft.Office.Interop.Word.Document ===============
        public List<Image> GetImages(Document doc, Microsoft.Office.Interop.Word.Application app)
        {
            List<Image> images = new List<Image>();
            for (var i = 1; i <= app.ActiveDocument.InlineShapes.Count; i++)
            {
                var inlineShapeId = i;



                images.Add(SaveInlineShapeToFile(inlineShapeId, app));
                // STA is needed in order to access the clipboard

            }

            return images;
        }
        // ===================================================================================

        // =========================== Inline Shape to File ==================================
        private Image SaveInlineShapeToFile(int inlineShapeId, Microsoft.Office.Interop.Word.Application app)
        {
            var inlineShape = app.ActiveDocument.InlineShapes[inlineShapeId];
            inlineShape.Select();
            app.Selection.Copy();

            // Check data is in the clipboard
            if (Clipboard.GetDataObject() != null)
            {
                var data = Clipboard.GetDataObject();

                // Check if the data conforms to a bitmap format
                if (data != null && data.GetDataPresent(DataFormats.Bitmap))
                {
                    // Fetch the image and convert it to a Bitmap
                    Image image = (Image)data.GetData(DataFormats.Bitmap, true);
                    return image;
                }
            }
            return null;
        }
        // ====================================================================================

    }
}
